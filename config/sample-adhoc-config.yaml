# this config lets you run Envoy ad-hoc and tells it to connect to the
# EGW xDS control plane.  you must also specify the node id and node
# cluster, e.g.,
# $ envoy --config-path=config/sample-adhoc-config.yaml --use-dynamic-base-id --config-yaml '{"node":{"cluster":"egw-sample", "id":"egw-sample/sample-adhoc"}}'
admin:
  access_log_path: /tmp/admin_access_sample-acnodal.log
  address:
    socket_address:
      protocol: TCP
      address: 0.0.0.0
      port_value: 9901
# Describes how to connect to the xDS control plane
static_resources:
  clusters:
  - name: xds_cluster
    connect_timeout: 1s
    type: LOGICAL_DNS
    load_assignment:
      cluster_name: xds_cluster
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 192.168.1.40
                port_value: 30018
    http2_protocol_options: {}
    upstream_connection_options:
      # configure a TCP keep-alive to detect and reconnect to the admin
      # server in the event of a TCP socket half open connection
      tcp_keepalive:
        keepalive_probes: 3
        keepalive_time: 10
        keepalive_interval: 5

# Connect to the xDS control plane and download config from there
dynamic_resources:
  cds_config:
    resource_api_version: V3
    api_config_source:
      api_type: GRPC
      transport_api_version: V3
      grpc_services:
      - envoy_grpc:
          cluster_name: xds_cluster
  lds_config:
    resource_api_version: V3
    api_config_source:
      api_type: GRPC
      transport_api_version: V3
      grpc_services:
      - envoy_grpc:
          cluster_name: xds_cluster
layered_runtime:
  layers:
    - name: runtime-0
      rtds_layer:
        rtds_config:
          resource_api_version: V3
          api_config_source:
            transport_api_version: V3
            api_type: GRPC
            grpc_services:
              envoy_grpc:
                cluster_name: xds_cluster
        name: runtime-0
